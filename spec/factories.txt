Lazy Attributes

Most factory attributes can be added using static values that are evaluated when the factory is defined, but some attributes (such as associations and other attributes that must be dynamically generated) will need values assigned each time an instance is generated. These “lazy” attributes can be added by passing a block instead of a parameter:

  Factory.define :user do |u|
    # ...
    u.activation_code { User.generate_activation_code }
  end
Dependent Attributes

Attributes can be based on the values of other attributes using the proxy that is yieled to lazy attribute blocks:

  Factory.define :user do |u|
    u.first_name 'Joe'
    u.last_name  'Blow'
    u.email {|a| "#{a.first_name}.#{a.last_name}@example.com".downcase }
  end

  Factory(:user, :last_name => 'Doe').email
  # => "joe.doe@example.com"
Associations

Associated instances can be generated by using the association method when defining a lazy attribute:

  Factory.define :post do |p|
    # ...
    p.author {|author| author.association(:user, :last_name => 'Writely') }
  end
The behavior of the association method varies depending on the build strategy used for the parent object.

  # Builds and saves a User and a Post
  post = Factory(:post)
  post.new_record?       # => false
  post.author.new_record # => false

  # Builds and saves a User, and then builds but does not save a Post
  post = Factory.build(:post)
  post.new_record?       # => true
  post.author.new_record # => false
Because this pattern is so common, a prettier syntax is available for defining associations:

  # The following definitions are equivalent:
  Factory.define :post do |p|
    p.author {|a| a.association(:user) }
  end

  Factory.define :post do |p|
    p.association :author, :factory => :user
  end
If the factory name is the same as the association name, the factory name can be left out.

Inheritance

You can easily create multiple factories for the same class without repeating common attributes by using inheritance:

  Factory.define :post do |p|
    # the 'title' attribute is required for all posts
    p.title 'A title'
  end

  Factory.define :approved_post, :parent => :post do |p|
    p.approved true
    # the 'approver' association is required for an approved post
    p.association :approver, :factory => :user
  end
Sequences

Unique values in a specific format (for example, e-mail addresses) can be generated using sequences. Sequences are defined by calling Factory.sequence, and values in a sequence are generated by calling Factory.next:

  # Defines a new sequence
  Factory.sequence :email do |n|
    "person#{n}@example.com"
  end

  Factory.next :email
  # => "person1@example.com"

  Factory.next :email
  # => "person2@example.com"
Sequences can be used in lazy attributes:

  Factory.define :user do |f|
    f.email { Factory.next(:email) }
  end
And it’s also possible to define an in-line sequence that is only used in a particular factory:

  Factory.define :user do |f|
    f.sequence(:email) {|n| "person#{n}@example.com" }
  end
Callbacks

Factory_girl makes available three callbacks for injecting some code:

after_build - called after a factory is built (via Factory.build)
after_create - called after a factory is saved (via Factory.create)
after_stub - called after a factory is stubbed (via Factory.stub)
Examples:

  # Define a factory that calls the generate_hashed_password method after it is built
  Factory.define :user do |u|
    u.after_build { |user| do_something_to(user) }
  end
Note that you’ll have an instance of the user in the block. This can be useful.

You can also define multiple types of callbacks on the same factory:

  Factory.define :user do |u|
    u.after_build  { |user| do_something_to(user) }
    u.after_create { |user| do_something_else_to(user) }
  end
Factories can also define any number of the same kind of callback. These callbacks will be executed in the order they are specified:

  Factory.define :user do |u|
    u.after_create { this_runs_first }
    u.after_create { then_this }
  end
Calling Factory.create will invoke both after_build and after_create callbacks.

Also, like standard attributes, child factories will inherit (and can define additional) callbacks from their parent factory.
